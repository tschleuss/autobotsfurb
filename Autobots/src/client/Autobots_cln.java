package client;

//Generated by Netbula JRPCGEN V2.5.6.
//Netbula JavaRPC demo, expires after a fixed date!



import java.io.Serializable;

import netbula.ORPC.*;
import rpc.interfaces.*;
import rpc.structs.*;

public class Autobots_cln extends ClientGeneric implements Autobots, Serializable{

	/**
	Construct an RPC client that is not bound to any server
	*/
	public Autobots_cln() throws rpc_err { };

	/**
	Construct an RPC client object connected to a server
	on the specified host with the specified protocol

	@param host server hostname, or URL of the RPC proxy if http is used
	@param proto protocol, can be "tcp", "udp" or "http"
	*/
	public Autobots_cln(String host, String proto) throws rpc_err {
		super(host, Autobots._def_pno, Autobots._def_vno, proto);
	}


	/**
	Construct an RPC client object connected to a server
	on the specified host with the specified protocol and port number

	@param host server hostname
	@param proto protocol, can be "tcp" or "udp"
	@param port server's fixed port number
	*/
	public Autobots_cln(String host, String proto, int port) throws rpc_err {
		super(host, proto, port, Autobots._def_pno, Autobots._def_vno);
	}


	/**
	Construct an RPC client object connected to a server
	on the specified host with the specified program number,version and protocol

	@param host server hostname, or URL of RPC proxy
	@param proto protocol, can be "tcp", "udp" or "http"
	@param prog server's program number
	@param ver server's version number
	*/
	public Autobots_cln(String host,  int prog, int ver, String proto) throws rpc_err {
		super(host, prog, ver, proto);
	}

	public mapConfig getMap() throws rpc_err {
		XDTvoid _in_arg = new XDTvoid();
		mapConfig _out_arg = new mapConfig();
		getClient().call(Autobots._getMap_proc, _in_arg, _out_arg);
		return _out_arg;
	}

	public botPosition getBotPosition() throws rpc_err {
		XDTvoid _in_arg = new XDTvoid();
		botPosition _out_arg = new botPosition();
		getClient().call(Autobots._getBotPosition_proc, _in_arg, _out_arg);
		return _out_arg;
	}

	public mapLayoutPercent getLayout() throws rpc_err {
		XDTvoid _in_arg = new XDTvoid();
		mapLayoutPercent _out_arg = new mapLayoutPercent();
		getClient().call(Autobots._getLayout_proc, _in_arg, _out_arg);
		return _out_arg;
	}


}

